/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}
configurations {
    flinkShadowJar
    // 一定要排除这些依赖(以及传递依赖)，因为它们是Flink提供的
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}
dependencies {
    //编译时的依赖项
    // Core
    implementation  'org.apache.flink:flink-streaming-java:1.19.1'
    implementation  'org.apache.flink:flink-connector-base:1.19.1'

    // Connectors
    implementation  'org.apache.flink:flink-clients:1.19.1'
    implementation  'org.apache.flink:flink-runtime-web:1.19.1'

    // Table ecosystem
    implementation  'org.apache.flink:flink-table-runtime:1.19.1'
    implementation  'org.apache.flink:flink-avro:1.19.1'

    // RocketMQ
    api('org.apache.rocketmq:rocketmq-client:5.3.1') {
        exclude group: 'io.github.aliyunmq', module: 'rocketmq-logback-classic'
        exclude group: 'io.github.aliyunmq', module: 'rocketmq-shaded-slf4j-api-bridge'
    }
    api('org.apache.rocketmq:rocketmq-acl:5.3.1') {
        exclude group: 'io.github.aliyunmq', module: 'rocketmq-logback-classic'
        exclude group: 'io.github.aliyunmq', module: 'rocketmq-shaded-slf4j-api-bridge'
    }
    api('org.apache.rocketmq:rocketmq-common:5.3.1') {
        exclude group: 'io.netty', module: 'netty-tcnative'
    }
    api ('org.apache.rocketmq:rocketmq-namesrv:5.3.1'){
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    api('org.apache.rocketmq:rocketmq-tools:5.3.1') {
        exclude group: 'io.github.aliyunmq', module: 'rocketmq-logback-classic'
        exclude group: 'io.github.aliyunmq', module: 'rocketmq-shaded-slf4j-api-bridge'
    }
    api 'org.apache.rocketmq:schema-registry-client:0.1.0'
    api 'org.apache.rocketmq:rocketmq-test:5.3.1'
    api ('org.apache.rocketmq:rocketmq-broker:5.3.1'){
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    // Other dependencies
    implementation  'commons-lang:commons-lang:2.6'
//    runtimeOnly 'org.slf4j:slf4j-api:2.0.5'
//    runtimeOnly 'ch.qos.logback:logback-classic:1.4.12'
//    runtimeOnly 'ch.qos.logback:logback-core:1.5.13'

    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.powermock:powermock-api-mockito:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
}

group = 'org.apache.rocketmq'
version = '1.0.0'
description = 'rocketmq-flink'
java.sourceCompatibility = JavaVersion.VERSION_1_8

java {
    withSourcesJar()
}




tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    // Try to turn them all off automatically
    options.compilerArgs << '-Xlint:none'
    options.compilerArgs << '-nowarn' // same as '-Xlint:none'

    // Turn them off manually
    options.compilerArgs << '-Xlint:-auxiliaryclass'
    options.compilerArgs << '-Xlint:-cast'
    options.compilerArgs << '-Xlint:-classfile'
    options.compilerArgs << '-Xlint:-deprecation'
    options.compilerArgs << '-Xlint:-dep-ann'
    options.compilerArgs << '-Xlint:-divzero'
    options.compilerArgs << '-Xlint:-empty'
    options.compilerArgs << '-Xlint:-fallthrough'
    options.compilerArgs << '-Xlint:-finally'
    options.compilerArgs << '-Xlint:-options'
    options.compilerArgs << '-Xlint:-overloads'
    options.compilerArgs << '-Xlint:-overrides'
    options.compilerArgs << '-Xlint:-path'
    options.compilerArgs << '-Xlint:-processing'
    options.compilerArgs << '-Xlint:-rawtypes'
    options.compilerArgs << '-Xlint:-serial'
    options.compilerArgs << '-Xlint:-static'
    options.compilerArgs << '-Xlint:-try'
    options.compilerArgs << '-Xlint:-unchecked'
    options.compilerArgs << '-Xlint:-varargs'

}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

}

apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.7"
}
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}


tasks.javadoc {
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en'
    }
}

sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar
    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar
    javadoc.classpath += configurations.flinkShadowJar
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}
jar {
    manifest {
        attributes 'Built-By': System.getProperty('user.name'),
                'Build-Jdk': System.getProperty('java.version')
    }
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    zip64 = true  // 启用 zip64 扩展
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
    mergeServiceFiles()
    zip64 = true  // 启用 zip64 扩展
}